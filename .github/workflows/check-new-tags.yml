name: Check for New Tags and Build Docker Image

on:
  schedule:
    - cron: '0 * * * *'
  push:
    branches: [ main ]
 
jobs:
  check-new-tags:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.compare-tags.outputs.new_tag }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Fetch Tags from Source Repository
      run: |
        git ls-remote --tags https://github.com/xo/usql.git | awk '{print $2}' | sed 's#refs/tags/##' | sort -V > tags.txt
      shell: bash

    - name: Compare Tags
      id: compare-tags
      run: |
        if [ -f .github/tags.txt ]; then
          new_tag=$(comm -13 .github/tags.txt tags.txt | tail -n 1)
          echo "$new_tag" > new_tag.txt
        else
          tail -n 1 tags.txt > new_tag.txt
        fi
        echo "new_tag=$(cat new_tag.txt)" >> $GITHUB_ENV
        echo "new_tag=$(cat new_tag.txt)" >> $GITHUB_OUTPUT

    - name: Store Current Tags
      run: |
        cp tags.txt .github/tags.txt
      shell: bash

    - name: Commit Updated Tags File
      run: |
        if ! git diff --quiet; then
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .github/tags.txt
          git commit -m "Update tags list"
          git push
        else
          echo "No changes to commit"
        fi
      shell: bash

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: check-new-tags
    if: ${{ needs.check-new-tags.outputs.new_tag != '' }}
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      id: cache-docker-layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin


    - name: Build and Push Docker Image
      id: build
      run: |
        docker buildx build \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
          --build-arg TAG=${{ needs.check-new-tags.outputs.new_tag }} \
          --tag davidecavestro/usql:${{ needs.check-new-tags.outputs.new_tag }} \
          --tag davidecavestro/usql:latest \
          --tag ghcr.io/davidecavestro/usql:${{ needs.check-new-tags.outputs.new_tag }} \
          --tag ghcr.io/davidecavestro/usql:latest \
          --push .
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        echo "image_tag=${{ needs.check-new-tags.outputs.new_tag }}" >> $GITHUB_ENV
        echo "image_tag=${{ needs.check-new-tags.outputs.new_tag }}" >> $GITHUB_OUTPUT

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    if: ${{ needs.build-and-push-docker-image.outputs.image_tag != '' }}

    steps:
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.build-and-push-docker-image.outputs.new_tag }}
        release_name: ${{ needs.build-and-push-docker-image.outputs.new_tag }}
        body: |
          Container images for this release:
          - Docker Hub: `davidecavestro/usql:${{ needs.build-and-push-docker-image.outputs.new_tag }}`
          - GitHub Container Registry: `ghcr.io/davidecavestro/usql:${{ needs.build-and-push-docker-image.outputs.new_tag }}`

        draft: false
        prerelease: false


    - name: Docker Hub Description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: davidecavestro/usql
        short-description: ${{ github.event.repository.description }}
        enable-url-completion: true
