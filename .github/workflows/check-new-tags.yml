name: Check for New Tags and Build Docker Image

on:
  schedule:
    - cron: '0 * * * *'
  push:
    branches: [ main ]
 
jobs:
  check-new-tags:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.compare-tags.outputs.new_tag }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Fetch Tags from Source Repository
      run: |
        git ls-remote --tags https://github.com/xo/usql.git | awk '{print $2}' | sed 's#refs/tags/##' | sort -V > tags.txt
      shell: bash

    - name: Load Previously Stored Tags
      id: load-prev-tags
      run: |
        if [ -f .github/tags.txt ]; then
          sort .github/tags.txt -o .github/tags.txt
          cat .github/tags.txt
        else
          echo "No previous tags file found."
        fi

    - name: Compare Tags
      id: compare-tags
      run: |
        if [ -f .github/tags.txt ]; then
          new_tag=$(comm -13 .github/tags.txt tags.txt | tail -n 1)
          echo "$new_tag" > new_tag.txt
        else
          cp tags.txt new_tag.txt
        fi
        echo "new_tag=$(cat new_tag.txt)" >> $GITHUB_ENV
        echo "::set-output name=new_tag::$(cat new_tag.txt)"

    - name: Commit Updated Tags File
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .github/tags.txt
        git commit -m "Update tags list"
        git push
      shell: bash

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: check-new-tags
    if: ${{ needs.check-new-tags.outputs.new_tag != '' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin


    - name: Build and Push Docker Image
      run: |
        docker build --build-arg TAG=${{ needs.check-new-tags.outputs.new_tag }} -t davidecavestro/usql:${{ needs.check-new-tags.outputs.new_tag }} .
        docker push davidecavestro/usql:${{ needs.check-new-tags.outputs.new_tag }}

    - name: Tag and Push Docker Image to GitHub Container Registry
      run: |
        docker tag davidecavestro/usql:${{ needs.check-new-tags.outputs.new_tag }} ghcr.io/davidecavestro/usql:${{ needs.check-new-tags.outputs.new_tag }}
        docker push ghcr.io/davidecavestro/usql:${{ needs.check-new-tags.outputs.new_tag }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check-new-tags.outputs.new_tag }}
        release_name: v${{ needs.check-new-tags.outputs.new_tag }}
        body: |
          This release provides the container image:
          `davidecavestro/usql:${{ needs.check-new-tags.outputs.new_tag }}`
        draft: false
        prerelease: false


    - name: Docker Hub Description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: davidecavestro/usql
        short-description: ${{ github.event.repository.description }}
        enable-url-completion: true
